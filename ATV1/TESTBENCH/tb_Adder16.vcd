$date
	Wed Mar 29 16:32:51 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb_Adder16 $end
$var wire 1 ! ovfl $end
$var wire 16 " s [15:0] $end
$var reg 16 # a [15:0] $end
$var reg 16 $ b [15:0] $end
$scope module mymodule $end
$var wire 16 % a [15:0] $end
$var wire 16 & b [15:0] $end
$var wire 1 ! ovfl $end
$var wire 16 ' s [15:0] $end
$var wire 16 ( c [15:0] $end
$scope module full0 $end
$var wire 1 ) a $end
$var wire 1 * b $end
$var wire 1 + cin $end
$var wire 1 , cout $end
$var wire 1 - w3 $end
$var wire 1 . w2 $end
$var wire 1 / w1 $end
$var wire 1 0 s $end
$scope module half0 $end
$var wire 1 ) a $end
$var wire 1 * b $end
$var wire 1 . c $end
$var wire 1 / s $end
$upscope $end
$scope module half1 $end
$var wire 1 . a $end
$var wire 1 + b $end
$var wire 1 0 c $end
$var wire 1 - s $end
$upscope $end
$upscope $end
$scope module full1 $end
$var wire 1 1 a $end
$var wire 1 2 b $end
$var wire 1 3 cin $end
$var wire 1 4 cout $end
$var wire 1 5 w3 $end
$var wire 1 6 w2 $end
$var wire 1 7 w1 $end
$var wire 1 8 s $end
$scope module half0 $end
$var wire 1 1 a $end
$var wire 1 2 b $end
$var wire 1 6 c $end
$var wire 1 7 s $end
$upscope $end
$scope module half1 $end
$var wire 1 6 a $end
$var wire 1 3 b $end
$var wire 1 8 c $end
$var wire 1 5 s $end
$upscope $end
$upscope $end
$scope module full10 $end
$var wire 1 9 a $end
$var wire 1 : b $end
$var wire 1 ; cin $end
$var wire 1 < cout $end
$var wire 1 = w3 $end
$var wire 1 > w2 $end
$var wire 1 ? w1 $end
$var wire 1 @ s $end
$scope module half0 $end
$var wire 1 9 a $end
$var wire 1 : b $end
$var wire 1 > c $end
$var wire 1 ? s $end
$upscope $end
$scope module half1 $end
$var wire 1 > a $end
$var wire 1 ; b $end
$var wire 1 @ c $end
$var wire 1 = s $end
$upscope $end
$upscope $end
$scope module full11 $end
$var wire 1 A a $end
$var wire 1 B b $end
$var wire 1 C cin $end
$var wire 1 D cout $end
$var wire 1 E w3 $end
$var wire 1 F w2 $end
$var wire 1 G w1 $end
$var wire 1 H s $end
$scope module half0 $end
$var wire 1 A a $end
$var wire 1 B b $end
$var wire 1 F c $end
$var wire 1 G s $end
$upscope $end
$scope module half1 $end
$var wire 1 F a $end
$var wire 1 C b $end
$var wire 1 H c $end
$var wire 1 E s $end
$upscope $end
$upscope $end
$scope module full12 $end
$var wire 1 I a $end
$var wire 1 J b $end
$var wire 1 K cin $end
$var wire 1 L cout $end
$var wire 1 M w3 $end
$var wire 1 N w2 $end
$var wire 1 O w1 $end
$var wire 1 P s $end
$scope module half0 $end
$var wire 1 I a $end
$var wire 1 J b $end
$var wire 1 N c $end
$var wire 1 O s $end
$upscope $end
$scope module half1 $end
$var wire 1 N a $end
$var wire 1 K b $end
$var wire 1 P c $end
$var wire 1 M s $end
$upscope $end
$upscope $end
$scope module full13 $end
$var wire 1 Q a $end
$var wire 1 R b $end
$var wire 1 S cin $end
$var wire 1 T cout $end
$var wire 1 U w3 $end
$var wire 1 V w2 $end
$var wire 1 W w1 $end
$var wire 1 X s $end
$scope module half0 $end
$var wire 1 Q a $end
$var wire 1 R b $end
$var wire 1 V c $end
$var wire 1 W s $end
$upscope $end
$scope module half1 $end
$var wire 1 V a $end
$var wire 1 S b $end
$var wire 1 X c $end
$var wire 1 U s $end
$upscope $end
$upscope $end
$scope module full14 $end
$var wire 1 Y a $end
$var wire 1 Z b $end
$var wire 1 [ cin $end
$var wire 1 \ cout $end
$var wire 1 ] w3 $end
$var wire 1 ^ w2 $end
$var wire 1 _ w1 $end
$var wire 1 ` s $end
$scope module half0 $end
$var wire 1 Y a $end
$var wire 1 Z b $end
$var wire 1 ^ c $end
$var wire 1 _ s $end
$upscope $end
$scope module half1 $end
$var wire 1 ^ a $end
$var wire 1 [ b $end
$var wire 1 ` c $end
$var wire 1 ] s $end
$upscope $end
$upscope $end
$scope module full2 $end
$var wire 1 a a $end
$var wire 1 b b $end
$var wire 1 c cin $end
$var wire 1 d cout $end
$var wire 1 e w3 $end
$var wire 1 f w2 $end
$var wire 1 g w1 $end
$var wire 1 h s $end
$scope module half0 $end
$var wire 1 a a $end
$var wire 1 b b $end
$var wire 1 f c $end
$var wire 1 g s $end
$upscope $end
$scope module half1 $end
$var wire 1 f a $end
$var wire 1 c b $end
$var wire 1 h c $end
$var wire 1 e s $end
$upscope $end
$upscope $end
$scope module full3 $end
$var wire 1 i a $end
$var wire 1 j b $end
$var wire 1 k cin $end
$var wire 1 l cout $end
$var wire 1 m w3 $end
$var wire 1 n w2 $end
$var wire 1 o w1 $end
$var wire 1 p s $end
$scope module half0 $end
$var wire 1 i a $end
$var wire 1 j b $end
$var wire 1 n c $end
$var wire 1 o s $end
$upscope $end
$scope module half1 $end
$var wire 1 n a $end
$var wire 1 k b $end
$var wire 1 p c $end
$var wire 1 m s $end
$upscope $end
$upscope $end
$scope module full4 $end
$var wire 1 q a $end
$var wire 1 r b $end
$var wire 1 s cin $end
$var wire 1 t cout $end
$var wire 1 u w3 $end
$var wire 1 v w2 $end
$var wire 1 w w1 $end
$var wire 1 x s $end
$scope module half0 $end
$var wire 1 q a $end
$var wire 1 r b $end
$var wire 1 v c $end
$var wire 1 w s $end
$upscope $end
$scope module half1 $end
$var wire 1 v a $end
$var wire 1 s b $end
$var wire 1 x c $end
$var wire 1 u s $end
$upscope $end
$upscope $end
$scope module full5 $end
$var wire 1 y a $end
$var wire 1 z b $end
$var wire 1 { cin $end
$var wire 1 | cout $end
$var wire 1 } w3 $end
$var wire 1 ~ w2 $end
$var wire 1 !" w1 $end
$var wire 1 "" s $end
$scope module half0 $end
$var wire 1 y a $end
$var wire 1 z b $end
$var wire 1 ~ c $end
$var wire 1 !" s $end
$upscope $end
$scope module half1 $end
$var wire 1 ~ a $end
$var wire 1 { b $end
$var wire 1 "" c $end
$var wire 1 } s $end
$upscope $end
$upscope $end
$scope module full6 $end
$var wire 1 #" a $end
$var wire 1 $" b $end
$var wire 1 %" cin $end
$var wire 1 &" cout $end
$var wire 1 '" w3 $end
$var wire 1 (" w2 $end
$var wire 1 )" w1 $end
$var wire 1 *" s $end
$scope module half0 $end
$var wire 1 #" a $end
$var wire 1 $" b $end
$var wire 1 (" c $end
$var wire 1 )" s $end
$upscope $end
$scope module half1 $end
$var wire 1 (" a $end
$var wire 1 %" b $end
$var wire 1 *" c $end
$var wire 1 '" s $end
$upscope $end
$upscope $end
$scope module full7 $end
$var wire 1 +" a $end
$var wire 1 ," b $end
$var wire 1 -" cin $end
$var wire 1 ." cout $end
$var wire 1 /" w3 $end
$var wire 1 0" w2 $end
$var wire 1 1" w1 $end
$var wire 1 2" s $end
$scope module half0 $end
$var wire 1 +" a $end
$var wire 1 ," b $end
$var wire 1 0" c $end
$var wire 1 1" s $end
$upscope $end
$scope module half1 $end
$var wire 1 0" a $end
$var wire 1 -" b $end
$var wire 1 2" c $end
$var wire 1 /" s $end
$upscope $end
$upscope $end
$scope module full8 $end
$var wire 1 3" a $end
$var wire 1 4" b $end
$var wire 1 5" cin $end
$var wire 1 6" cout $end
$var wire 1 7" w3 $end
$var wire 1 8" w2 $end
$var wire 1 9" w1 $end
$var wire 1 :" s $end
$scope module half0 $end
$var wire 1 3" a $end
$var wire 1 4" b $end
$var wire 1 8" c $end
$var wire 1 9" s $end
$upscope $end
$scope module half1 $end
$var wire 1 8" a $end
$var wire 1 5" b $end
$var wire 1 :" c $end
$var wire 1 7" s $end
$upscope $end
$upscope $end
$scope module full9 $end
$var wire 1 ;" a $end
$var wire 1 <" b $end
$var wire 1 =" cin $end
$var wire 1 >" cout $end
$var wire 1 ?" w3 $end
$var wire 1 @" w2 $end
$var wire 1 A" w1 $end
$var wire 1 B" s $end
$scope module half0 $end
$var wire 1 ;" a $end
$var wire 1 <" b $end
$var wire 1 @" c $end
$var wire 1 A" s $end
$upscope $end
$scope module half1 $end
$var wire 1 @" a $end
$var wire 1 =" b $end
$var wire 1 B" c $end
$var wire 1 ?" s $end
$upscope $end
$upscope $end
$scope module half0 $end
$var wire 1 C" a $end
$var wire 1 D" b $end
$var wire 1 E" c $end
$var wire 1 F" s $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
0F"
0E"
0D"
0C"
0B"
0A"
0@"
0?"
0>"
0="
0<"
0;"
0:"
09"
08"
07"
06"
05"
04"
03"
02"
01"
00"
0/"
0."
0-"
0,"
0+"
0*"
0)"
0("
0'"
0&"
0%"
0$"
0#"
0""
0!"
0~
0}
0|
0{
0z
0y
0x
0w
0v
0u
0t
0s
0r
0q
0p
0o
0n
0m
0l
0k
0j
0i
0h
0g
0f
0e
0d
0c
0b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
0V
0U
0T
0S
0R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0E
0D
0C
0B
0A
0@
0?
0>
0=
0<
0;
0:
09
08
07
06
05
04
03
02
01
00
0/
0.
0-
0,
0+
0*
0)
b0 (
b0 '
b0 &
b0 %
b0 $
b0 #
b0 "
z!
$end
#1
